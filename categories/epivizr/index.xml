<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Epiviz</title>
    <link>http://epiviz.github.io/categories/epivizr/index.xml</link>
    <description>Recent content on Epiviz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2016 ~ epiviz</copyright>
    <atom:link href="/categories/epivizr/index.xml" rel="self" type="application/rss+xml" />
    
      
        
          <item>
            <title>Using BED files with epiviz</title>
            <link>http://epiviz.github.io/post/2014-12-18-bedtools/</link>
            <pubDate>Thu, 18 Dec 2014 10:52:12 -0500</pubDate>
            
            <guid>http://epiviz.github.io/post/2014-12-18-bedtools/</guid>
            <description>&lt;p&gt;On &lt;a href=&#34;https://twitter.com/aaronquinlan/status/545559723853246464&#34;&gt;a twitter exchange&lt;/a&gt; I showed &lt;a href=&#34;https://twitter.com/aaronquinlan&#34;&gt;A. Quinlan&lt;/a&gt; how to use &lt;code&gt;epivizr&lt;/code&gt; to load data from a custom &lt;code&gt;bed&lt;/code&gt; file. Here is the code I gave him:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(epivizr)
library(rtracklayer)

# download example bed file
download.file(&amp;quot;https://raw.githubusercontent.com/arq5x/bedtools/master/data/aluY.hg19.bed.gz&amp;quot;, destfile=&amp;quot;test.bed.gz&amp;quot;, method=&amp;quot;curl&amp;quot;)

# start UI
mgr &amp;lt;- startEpiviz(workspace=&amp;quot;mi9NojjqT1l&amp;quot;)

# import bed file
gr &amp;lt;- import(BEDFile(&amp;quot;test.bed.gz&amp;quot;))

# drop data from unplaced contigs
gr &amp;lt;- keepSeqlevels(gr, paste0(&amp;quot;chr&amp;quot;,c(1:22,&amp;quot;X&amp;quot;,&amp;quot;Y&amp;quot;)))

# add track with bed file data
dev &amp;lt;- mgr$addDevice(gr, &amp;quot;example bed&amp;quot;)

# finish up
mgr$stopServer()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also at &lt;a href=&#34;https://gist.github.com/hcorrada/f930fa0092f1100f1d37&#34;&gt;https://gist.github.com/hcorrada/f930fa0092f1100f1d37&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea behind the &lt;code&gt;epivizr&lt;/code&gt; BioC package is that it can use that infrastructure to import &lt;strong&gt;a lot&lt;/strong&gt; of data formats into &lt;code&gt;GenomicRanges&lt;/code&gt;-like objects one can manipulate (say, filter or transform), and have interactive visualization that reflects those manipulations immediately. However, it&amp;rsquo;s a little cumbersome for the use-case of where you have data on a BED file that you don&amp;rsquo;t need to manipulate, but just explore visually.&lt;/p&gt;

&lt;p&gt;An option we&amp;rsquo;d like to get started with to support this &lt;em&gt;contextual-data&lt;/em&gt; use-case is to write small programs that would use, say &lt;a href=&#34;https://github.com/arq5x/bedtools&#34;&gt;bedtools&lt;/a&gt; for example, to implement the epiviz &lt;a href=&#34;http://epiviz.github.io/plugins.html#new-data-provider-plugin&#34;&gt;Data Provider API&lt;/a&gt; and serve data directly from a bed file.&lt;/p&gt;
</description>
          </item>
        
      
    
      
        
          <item>
            <title>New epivizr release</title>
            <link>http://epiviz.github.io/post/2014-10-31-new-epivizr-release/</link>
            <pubDate>Fri, 31 Oct 2014 10:52:12 -0500</pubDate>
            
            <guid>http://epiviz.github.io/post/2014-10-31-new-epivizr-release/</guid>
            <description>

&lt;p&gt;Version 1.4 of &lt;a href=&#34;http://www.bioconductor.org/packages/release/bioc/html/epivizr.html&#34;&gt;&lt;code&gt;epivizr&lt;/code&gt;&lt;/a&gt; was released as part of the new &lt;a href=&#34;http://master.bioconductor.org/news/bioc_3_0_release/&#34;&gt;Bioconductor 3.0 release&lt;/a&gt;. There are a good number of new features in &lt;code&gt;epivizr&lt;/code&gt; in this release, including the ability of running the Epiviz UI &lt;em&gt;within R&lt;/em&gt;, making R/Bioconductor capable of running it&amp;rsquo;s own genome browser!&lt;/p&gt;

&lt;h2 id=&#34;running-epiviz-as-a-standalone&#34;&gt;Running &lt;code&gt;epiviz&lt;/code&gt; as a standalone&lt;/h2&gt;

&lt;p&gt;Previous versions of &lt;code&gt;epivizr&lt;/code&gt; used the {{ site.epiviz }} web application hosted at the University of Maryland as the front-end for UI. In this new version, we bundle the &lt;code&gt;JavaScript&lt;/code&gt; source for the {{ site.epiviz }} UI in the &lt;code&gt;epivizr&lt;/code&gt; package which allows &lt;code&gt;R&lt;/code&gt; to serve as it&amp;rsquo;s own web host. Like &lt;a href=&#34;http://shiny.rstudio.com/&#34;&gt;Shiny&lt;/a&gt;, we use the &lt;code&gt;httpuv&lt;/code&gt; package to serve the interactive application. In fact, lots of thanks to &lt;a href=&#34;http://github.com/jcheng5&#34;&gt;Joe Cheng&lt;/a&gt; and &lt;a href=&#34;http://rstudio.com&#34;&gt;RStudio&lt;/a&gt; for helping to make this happen!&lt;/p&gt;

&lt;p&gt;A genome browser without a genome is not very useful, so you need to tell it about the genome annotation you want to use. One place in &lt;code&gt;Bioconductor&lt;/code&gt; where you can get genome annotation information is in their &lt;code&gt;OrganismDb&lt;/code&gt; packages.&lt;/p&gt;

&lt;p&gt;(Make sure you have version 1.4.2 installed to follow along! Just run &lt;code&gt;biocLite(&amp;quot;epivizr&amp;quot;)&lt;/code&gt; to get it). The &lt;code&gt;startStandalone&lt;/code&gt; function can take an object of this class and start the UI with that genome and its gene annotation loaded. Here&amp;rsquo;s how you can browse the mouse genome with Bioconductor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(epivizr)
library(Mus.musculus)

# this call makes the gene annotation from Mus.musculus,
# takes a couple of seconds (see more info below)
mgr &amp;lt;- startStandalone(Mus.musculus, &amp;quot;mm10&amp;quot;, keepSeqlevels=paste0(&amp;quot;chr&amp;quot;,c(1:19,&amp;quot;X&amp;quot;,&amp;quot;Y&amp;quot;)))
mgr$stopServer()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dynamic-genome-annotation-on-any-ui&#34;&gt;Dynamic genome annotation on any UI&lt;/h2&gt;

&lt;p&gt;This release also allows to add genome and gene information on any Epiviz UI, both standalone and hosted (e.g., at the University of Maryland). For instance, to add the mouse genome to the Epiviz UI hosted at UMD you can use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;mgr &amp;lt;- startEpiviz(workspace=&amp;quot;OJS2BPGrh7v&amp;quot;)


# remove the pre-loaded hg19 annotation
mgr$rmSeqinfo(paste0(&amp;quot;chr&amp;quot;,c(1:22,&amp;quot;X&amp;quot;,&amp;quot;Y&amp;quot;)))

# make a genome annotation object (takes a few seconds)
anno &amp;lt;- epivizr::makeGeneTrackAnnotation(Mus.musculus, keepSeqlevels=paste0(&amp;quot;chr&amp;quot;, c(1:19,&amp;quot;X&amp;quot;,&amp;quot;Y&amp;quot;)))

# add chromosome names and lengths
mgr$addSeqinfo(seqinfo(anno))

# check on UI, only 19 autosomes now
# add the gene annotation track
annoDevice &amp;lt;- mgr$addDevice(anno, &amp;quot;mm10&amp;quot;, type=&amp;quot;geneInfo&amp;quot;)

# now you have a mouse genome browser!
mgr$stopServer()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;heatmaps&#34;&gt;Heatmaps&lt;/h2&gt;

&lt;p&gt;You can now add heatmaps to your Epiviz sessions. Here is an example using exon-level RNA-seq count data from the TCGA project (this data is included in the &lt;code&gt;epivizr&lt;/code&gt; package).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(epivizr)
data(tcga_colon_expression)

# make the names easier to understand
sampleNames &amp;lt;- paste0(seq(len=nrow(colData(colonSE))),&amp;quot;:&amp;quot;,colData(colonSE)$sample_type)
colnames(colonSE) &amp;lt;- sampleNames

# normalize counts using DE-Seq&#39;s size factors
ref_sample &amp;lt;- 2 ^ rowMeans(log2(assay(colonSE) + 1))
scaled &amp;lt;- (assay(colonSE) + 1) / ref_sample
scaleFactor &amp;lt;- Biobase::rowMedians(t(scaled))
assay_normalized &amp;lt;- sweep(assay(colonSE), 2, scaleFactor, &amp;quot;/&amp;quot;)
assay(colonSE) &amp;lt;- log2(assay_normalized + 1)

# start the UI manager
mgr &amp;lt;- startEpiviz(workspace=&amp;quot;qyOTB6vVnff&amp;quot;)

# add the count data
msObj &amp;lt;- mgr$addMeasurements(colonSE, &amp;quot;tcga exon expression&amp;quot;)

# make a heatmap of the first 15 samples
devObj &amp;lt;- mgr$heatmapChart(msObj$getMeasurements()[1:15])

mgr$stopServer()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And since Epiviz &lt;a href=&#34;http://epiviz.github.io/features/2014/10/28/new-feature-clustering.html&#34;&gt;now supports clustering on heatmaps&lt;/a&gt;, you have a dynamic heatmap visualization of your expression data as you browse the genome.&lt;/p&gt;

&lt;h2 id=&#34;what-s-coming-next&#34;&gt;What&amp;rsquo;s coming next&amp;hellip;&lt;/h2&gt;

&lt;p&gt;For the next release of &lt;code&gt;epivizr&lt;/code&gt; we are planning some new fun things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Support for visualization directly from &lt;code&gt;BigWig&lt;/code&gt; and &lt;code&gt;BAM&lt;/code&gt; files to support NGS workflows.&lt;/li&gt;
&lt;li&gt;Using epiviz browser sessions, or standalone visualizations in publications (markdown documents, html5 slidedecks, or your own web application).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We&amp;rsquo;ve started working on #1 above, you can see how it&amp;rsquo;s going by using the &lt;a href=&#34;https://github.com/epiviz/epivizr&#34;&gt;&lt;code&gt;epivizr&lt;/code&gt; development version&lt;/a&gt;.&lt;/p&gt;
</description>
          </item>
        
      
    
  </channel>
</rss>
